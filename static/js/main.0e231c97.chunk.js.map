{"version":3,"sources":["components/Home.js","components/Error404.js","components/About.js","components/TagPage.js","App.js","serviceWorker.js","index.js"],"names":["Home","tags","this","props","react_default","a","createElement","Fragment","map","tag","className","key","react_router_dom","to","concat","Component","Error404","About","TagPage","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleDrawer","setState","drawer","state","loading","_this2","fetch","then","response","json","tagsArray","forEach","user","push","name","_this3","Menu_default","fontSize","onClick","react_router","exact","path","render","components_Home","components_TagPage","match","params","component","Drawer","anchor","open","onClose","role","onKeyDown","List","ListItem","button","ListItemIcon","icons_Home_default","ListItemText","Info_default","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e231c97.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../styles/Home.css';\nimport { Link } from 'react-router-dom'\n\nclass Home extends Component {\n\n    render() {\n        const { tags } = this.props;\n        return (\n            <React.Fragment>\n                {tags.map(tag => (\n                    <div className='tagCards' \n                    key={tag}>\n                    <Link to={`/${tag}`}>{tag}</Link>\n                    </div>\n                ))}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react'\n\nexport default class Error404 extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Error404</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                <h1>About</h1>\n            </div>\n        )\n    }\n}\n\nexport default About","import React, { Component } from 'react'\n\nclass TagPage extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.tag}\n            </div>\n        )\n    }\n}\n\nexport default TagPage","import React, { Component } from 'react';\nimport './App.css'\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\nimport Home from './components/Home';\nimport Error404 from './components/Error404';\nimport About from './components/About';\nimport Menu from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer';\nimport HomeIcon from '@material-ui/icons/Home'\nimport InfoIcon from '@material-ui/icons/Info'\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TagPage from './components/TagPage';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n        tags: [],\n        drawer: false,\n        loading: true,\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            loading: false,\n          })\n          var tagsArray = [];\n          json.forEach(user => {\n            tagsArray.push(user.name)\n          })\n          this.setState({\n            tags: tagsArray\n          })\n        })\n  }\n\n  toggleDrawer = () => {\n    this.setState({\n      drawer: !this.state.drawer\n    })\n  }\n\n  render() {\n    const list = () => (\n      <div\n        role=\"presentation\"\n        onClick={() => this.toggleDrawer()}\n        onKeyDown={() => this.toggleDrawer()}\n      >\n        <List>\n            <ListItem button>\n              <ListItemIcon><HomeIcon/> </ListItemIcon>\n              <ListItemText><Link to='/' className='drawerTextLink'>Home</Link></ListItemText>\n            </ListItem>\n            <ListItem button>\n            <ListItemIcon><InfoIcon/> </ListItemIcon>\n              <ListItemText><Link to='/about' className='drawerTextLink'>About Us</Link></ListItemText>\n            </ListItem>\n        </List>\n      </div>\n    );\n\n    return (\n      this.state.loading ? <h1>loading</h1> :\n      <div className=\"App\">\n      <HashRouter>\n      \n      <div className='header'><Menu fontSize='large' onClick={this.toggleDrawer} /></div>\n\n        <Switch>\n          <Route exact path='/' render={props => <Home tags={this.state.tags} />} />\n          <Route path='/:tag' render={props => <TagPage tag={props.match.params.tag} />} />\n          <Route path='/about' component={About} />\n          <Route path='*' component={Error404} />\n        </Switch>\n\n        <Drawer anchor='top' open={this.state.drawer} onClose={this.toggleDrawer}>\n            {list()}\n          </Drawer>\n      </HashRouter>\n    </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}